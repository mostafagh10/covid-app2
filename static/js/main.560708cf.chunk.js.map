{"version":3,"sources":["rates/confirmed.js","rates/recovered.js","rates/deaths.js","rates/buttons.js","App.js","serviceWorker.js","index.js"],"names":["Confirmed","className","this","props","returnco","Component","Recovered","returnco2","Deaths","returnco3","Button","to","App","state","list","country","confirmed","recovered","recovered2","deaths","deaths2","setloading","returncountries","concat","sort","a","b","map","s","i","key","colSpan","returncountries2","returncountries3","getdata","axios","get","restcountries","countries","data","length","name","obj","q","console","log","res","value","s1","toFixed","push","setState","getda","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.560708cf.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport axios from 'axios'\r\n\r\n\r\nclass Confirmed extends Component {\r\n  render(){\r\n  return(\r\n    <div className=\"Confirmed\">\r\n       <table>\r\n         <tr>\r\n           <td>rate</td>\r\n           <td>country</td>\r\n           <td><b className=\"c\">confirmed</b></td>\r\n           <td>recovered</td>\r\n           <td>deaths</td>\r\n         </tr>\r\n          {this.props.returnco}\r\n       </table>\r\n    </div>\r\n  )\r\n  }\r\n}\r\n\r\nexport default Confirmed;\r\n","import React , {Component} from 'react';\r\nimport axios from 'axios'\r\n\r\n\r\nclass Recovered extends Component {\r\n  render(){\r\n  return(\r\n    <div className=\"Recovered\">\r\n       <table>\r\n         <tr>\r\n           <td>rate</td>\r\n           <td>country</td>\r\n           <td>confirmed</td>\r\n           <td><b className=\"r\">recovered</b></td>\r\n           <td>deaths</td>\r\n         </tr>\r\n          {this.props.returnco2}\r\n       </table>\r\n    </div>\r\n  )\r\n  }\r\n}\r\n\r\nexport default Recovered;\r\n","import React , {Component} from 'react';\r\nimport axios from 'axios'\r\n\r\n\r\nclass Deaths extends Component {\r\n  render(){\r\n  return(\r\n    <div className=\"Deaths\">\r\n       <table>\r\n         <tr>\r\n           <td>rate</td>\r\n           <td>country</td>\r\n           <td>confirmed</td>\r\n           <td>recovered</td>\r\n           <td><b className=\"d\">deaths</b></td>\r\n         </tr>\r\n          {this.props.returnco3}\r\n       </table>\r\n    </div>\r\n  )\r\n  }\r\n}\r\n\r\nexport default Deaths;\r\n","import React , {Component} from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nclass Button extends Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Link to=\"/\"><button className=\"con\">CONFIRMED</button></Link><p>&nbsp;</p>\r\n                <Link to=\"/recovered\"><button className=\"rec\">RECOVERED</button></Link><p>&nbsp;</p>\r\n                <Link to=\"/deaths\"><button className=\"dea\">DEATHS</button></Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Button;","import React , {Component} from 'react';\nimport axios from 'axios'\nimport Confirmed from './rates/confirmed'\nimport Recovered from './rates/recovered'\nimport Deaths from './rates/deaths'\nimport Button from './rates/buttons'\nimport {BrowserRouter,Route,HashRouter} from 'react-router-dom'\nimport $ from 'jquery';\n\n\nclass App extends Component {\n  state = {\n  list : [   \n      {\n      country:null,\n      confirmed:null,\n      recovered:null,\n      recovered2:null,\n      deaths:null,\n      deaths2:null\n      }\n    ],\n    setloading : false\n  }\n\n  componentDidMount(){\n    this.getdata();\n  }\n\n  async getdata(){\n    const restapi = await axios.get(\"https://covid19.mathdro.id/api\");\n    const restcountries = await axios.get(\"https://covid19.mathdro.id/api/countries\");\n    //const countries = Object.keys(restcountries.data.countries);\n    const countries = [];\n    for(var i = 0; i < restcountries.data.countries.length; i++){\n      if(restcountries.data.countries[i].name === \"Gambia\"){\n        continue;\n      }\n      else{\n      const obj = {};\n      obj[\"country\"]=restcountries.data.countries[i].name;\n      const q = obj[\"country\"];\n      console.log(i+1 + \" : \" + q);\n      const res = await axios.get(`https://covid19.mathdro.id/api/countries/${q}`);\n      obj[\"confirmed\"]=res.data.confirmed.value;\n      obj[\"recovered\"]=res.data.recovered.value;\n      var s1 = (res.data.recovered.value/res.data.confirmed.value)*100;\n      if((res.data.recovered.value == 0) || (res.data.recovered.value == res.data.confirmed.value)){\n        obj[\"recovered2\"] = 100;\n      }\n      else{\n      obj[\"recovered2\"]= s1.toFixed(2);\n      }\n      obj[\"deaths\"]=res.data.deaths.value;\n      var s = (res.data.deaths.value/res.data.confirmed.value)*100;\n      if(res.data.deaths.value == 0){\n        obj[\"deaths2\"] = 0;\n      }\n      else{\n      obj[\"deaths2\"] = s.toFixed(2);\n      }\n      countries.push(obj)\n      }\n     }\n    this.setState({\n      list : countries,\n      setloading : true\n    })\n  }\n\n  returncountries = () => {\n    const {list} = this.state;\n    const highestconfirmed = [].concat(this.state.list).sort((a, b) => a.confirmed < b.confirmed ? 1 : -1)\n    return highestconfirmed.map((s,i) => {\n      return this.state.setloading ? \n      <tr key={i}>\n          <td>{i+1}</td>\n          <td>{s.country}</td>\n          <td><b className=\"c\">{s.confirmed}</b></td>\n          <td>{s.recovered}<br />({s.recovered2})%</td>\n          <td>{s.deaths}<br />({s.deaths2})%</td>\n        </tr>\n        : <tr>\n        <td colSpan=\"5\"><h1>please wait <span className=\"s1\">&bull;</span>\n        <span className=\"s2\">&bull;</span>\n        <span className=\"s3\">&bull;</span>\n        <span className=\"s4\">&bull;</span></h1></td>\n        </tr>\n    })\n  }\n\n  returncountries2 = () => {\n    const {list} = this.state;\n    const highestconfirmed = [].concat(this.state.list).sort((a, b) => a.recovered2 < b.recovered2 ? 1 : -1)\n    return highestconfirmed.map((s,i) => {\n      return this.state.setloading ? \n      <tr key={i}>\n          <td>{i+1}</td>\n          <td>{s.country}</td>\n          <td>{s.confirmed}</td>\n          <td><b className=\"r\">({s.recovered2})%</b><br />{s.recovered}</td>\n          <td>{s.deaths}<br />({s.deaths2})%</td>\n        </tr>\n        : <tr>\n        <td colSpan=\"5\"><h1>please wait <span className=\"s1\">&bull;</span>\n        <span className=\"s2\">&bull;</span>\n        <span className=\"s3\">&bull;</span>\n        <span className=\"s4\">&bull;</span></h1></td>\n        </tr>\n    })\n  }\n\n  returncountries3 = () => {\n    const {list} = this.state;\n    const highestconfirmed = [].concat(this.state.list).sort((a, b) => a.deaths2 < b.deaths2 ? 1 : -1)\n    return highestconfirmed.map((s,i) => {\n      return this.state.setloading ? \n      <tr key={i}>\n          <td>{i+1}</td>\n          <td>{s.country}</td>\n          <td>{s.confirmed}</td>\n          <td>{s.recovered}<br />({s.recovered2})%</td>\n          <td><b className=\"d\">({s.deaths2})%</b><br />{s.deaths}</td>\n        </tr>\n        : <tr>\n        <td colSpan=\"5\"><h1>please wait <span className=\"s1\">&bull;</span>\n        <span className=\"s2\">&bull;</span>\n        <span className=\"s3\">&bull;</span>\n        <span className=\"s4\">&bull;</span></h1></td>\n        </tr>\n    })\n  }\n  render(){\n  return(\n    <div className=\"App\">\n      <h1>COVID-19 SORTING APP</h1>\n      <HashRouter>\n      <Button getda = {() => this.getdata()}/><br />\n      <Route exact path=\"/\" component={() => <Confirmed returnco={this.returncountries()}/>} />\n      <Route exact path=\"/recovered\" component={() => <Recovered returnco2={this.returncountries2()}/>} />\n      <Route exact path=\"/deaths\" component={() => <Deaths returnco3={this.returncountries3()}/>} />\n      </HashRouter>\n    </div>\n  )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport $ from 'jquery';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}